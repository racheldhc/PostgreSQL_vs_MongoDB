-- Creating movies table
create table movies(id serial primary key, title varchar(255), writer varchar(100), year int, actors varchar(100)[], franchise varchar(50), synopsis text);

-- Inserts
insert into movies(title, writer, year, actors) values ('Fight Club', 'Chuck Palahniuk', 1999, '{"Brad Pitt", "Edward Norton"}') ,('Pulp Fiction', 'Quentin Tarantino', 1994, '{"John Travolta", "Uma Thurman"}'),('Inglorious Basterds', 'Quentin Tarantino', 2009, '{"Brad Pitt", "Diane Kruger", "Eli Roth"}' );
insert into movies(title, writer, year, franchise) values ('The Hobbit: An Unexpected Journey', 'J.R.R. Tolkein', 2019, 'The Hobbit'), ('The Hobbit: The Desolation of Smaug', 'J.R.R. Tolein',2013, 'The Hobbit')
insert into movies(title, writer, year, franchise, synopsis) values ('The Hobbit: The Battle of the Five Armies', 'J.R.R. Tolkein', 2012, 'The Hobbit', 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.');
insert into movies(title) values ('Pee Wee Herman''s Big Adventure'),('Avatar');

-- Selects
select * from movies;
select * from movies where writer = 'Quentin Tarantino';
select * from movies where actors @> '{"Brad Pitt"}';
select * from movies where franchise = 'The Hobbit';
select * from movies where year >= 1990 and year < 2000;
select * from movies where year < 2000 or year > 2010;

-- Updates
update movies set synopsis = 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.' where title = 'The Hobbit: An Unexpected Journey';
update movies set synopsis = 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.' where title = 'The Hobbit: The Desolation of Smaug';
    -- adding to array https://stackoverflow.com/questions/11007800/postgres-array-append-array-length-for-array-push
update movies set actors = array_append(actors, 'Samuel L. Jackson') where title = 'Pulp Fiction';


-- Text search
select title, synopsis from movies where synopsis ilike '%Bilbo%';
select title, synopsis from movies where synopsis ilike '%Gandalf%';
    -- not like operation https://www.postgresql.org/docs/8.3/functions-matching.html
select title, synopsis from movies where synopsis ilike '%Bilbo%' and synopsis not ilike '%Gandalf%';
select title, synopsis from movies where franchise = 'The Hobbit';
select title, synopsis from movies where synopsis ilike '%gold%' and synopsis ilike '%dragon%';


-- Deletes
delete from movies where title = 'Pee Wee Herman''s Big Adventure';


-- Create and add to users table
create table users(username varchar(50) primary key, first_name varchar (50), last_name varchar(50));
insert into users values ('GoodGuyGreg', 'Good Guy', 'Greg');
insert into users values ('ScumbagSteve', 'Scumbag', 'Steve');


-- Create and add to posts table
create table posts(id serial primary key, username varchar(50), title varchar(255), body text);
insert into posts(username, title, body) values ('GoodGuyGreg', 'Passes out at party', 'Wakes up early and cleans house'), ('GoodGuyGreg', 'Steals your identity', 'Raises your credit score'), ('GoodGuyGreg', 'Reports a bug in your code', 'Sends you a Pull Request');
insert into posts(username, title, body) values ('ScumbagSteve', 'Borrows something', 'Sells it'), ('ScumbagSteve', 'Borrows everything', 'The end'), ('ScumbagSteve', 'Forks your repo on github', 'Sets to private');


-- Create and add to comments table
create table comments(id serial primary key, username varchar (50), comment text, post int, foreign key (post) references posts(id));
insert into comments(username, comment, post) values ('GoodGuyGreg', 'Hope you got a good deal!', 4), ('GoodGuyGreg', 'What''s mine is yours!', 5), ('GoodGuyGreg', 'Don''t violate the licensing agreement!', 6);
insert into comments(username, comment, post) values ('ScumbagSteve', 'It still isn''t clean', 1), ('ScumbagSteve', 'Denied your PR cause I found a hack', 3);

-- Relationship queries
select * from users;
select * from posts;
select * from posts where username = 'GoodGuyGreg';
select * from posts where username = 'ScumbagSteve';
select * from comments;
select * from comments where username = 'GoodGuyGreg';
select * from comments where username = 'ScumbagSteve';
select * from comments where post = (select id from posts where title = 'Reports a bug in your code');